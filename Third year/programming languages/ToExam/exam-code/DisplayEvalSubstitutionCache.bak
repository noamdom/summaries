#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 669 0 24 29 1 #"\n"
0 0 49 3 8 #"#lang pl"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 6 #" FLANG"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Num  "
0 0 49 3 6 #"Number"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Add  "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Sub  "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Mul  "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Div  "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Id   "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [With "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Fun  "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"  [Call "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 2 #"])"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 11 #"parse-sexpr"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"Sexpr"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 39 #";; to convert s-expressions into FLANGs"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 14 #" (parse-sexpr "
0 0 49 3 5 #"sexpr"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 5 #"match"
0 0 49 3 6 #" sexpr"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 7 #"number:"
0 0 49 3 8 #" n)    ("
0 0 49 3 3 #"Num"
0 0 49 3 4 #" n)]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 7 #"symbol:"
0 0 49 3 8 #" name) ("
0 0 49 3 2 #"Id"
0 0 49 3 7 #" name)]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"cons"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 4 #"with"
0 0 49 3 6 #" more)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 5 #"match"
0 0 49 3 6 #" sexpr"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 4 #"with"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 7 #"symbol:"
0 0 49 3 19 #" name) named) body)"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 4 #"With"
0 0 49 3 46 #" name (parse-sexpr named) (parse-sexpr body))]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"       ["
0 0 50 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 1 #"("
0 0 50 3 5 #"error"
0 0 50 3 2 #" '"
0 0 50 3 44 #"parse-sexpr \"bad `with' syntax in ~s\" sexpr)"
0 0 49 3 3 #"])]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"cons"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 3 #"fun"
0 0 49 3 6 #" more)"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"     ("
0 0 49 3 5 #"match"
0 0 49 3 6 #" sexpr"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"       [("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 3 #"fun"
0 0 49 3 2 #" ("
0 0 49 3 4 #"list"
0 0 49 3 2 #" ("
0 0 49 3 7 #"symbol:"
0 0 49 3 13 #" name)) body)"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"        ("
0 0 49 3 3 #"Fun"
0 0 49 3 26 #" name (parse-sexpr body))]"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"       ["
0 0 50 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 1 #"("
0 0 50 3 5 #"error"
0 0 50 3 2 #" '"
0 0 50 3 43 #"parse-sexpr \"bad `fun' syntax in ~s\" sexpr)"
0 0 49 3 3 #"])]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"+"
0 0 49 3 1 #" "
0 0 50 3 3 #"lhs"
0 0 49 3 1 #" "
0 0 50 3 3 #"rhs"
0 0 49 3 3 #") ("
0 0 49 3 3 #"Add"
0 0 49 3 1 #" "
0 0 50 3 17 #"(parse-sexpr lhs)"
0 0 49 3 1 #" "
0 0 50 3 17 #"(parse-sexpr rhs)"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"-"
0 0 49 3 1 #" "
0 0 50 3 3 #"lhs"
0 0 49 3 1 #" "
0 0 50 3 3 #"rhs"
0 0 49 3 3 #") ("
0 0 49 3 3 #"Sub"
0 0 49 3 1 #" "
0 0 50 3 17 #"(parse-sexpr lhs)"
0 0 49 3 1 #" "
0 0 50 3 17 #"(parse-sexpr rhs)"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"*"
0 0 49 3 11 #" lhs rhs) ("
0 0 49 3 3 #"Mul"
0 0 49 3 38 #" (parse-sexpr lhs) (parse-sexpr rhs))]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 1 #"/"
0 0 49 3 1 #" "
0 0 50 3 3 #"lhs"
0 0 49 3 1 #" "
0 0 50 3 3 #"rhs"
0 0 49 3 3 #") ("
0 0 49 3 3 #"Div"
0 0 49 3 1 #" "
0 0 50 3 17 #"(parse-sexpr lhs)"
0 0 49 3 1 #" "
0 0 50 3 17 #"(parse-sexpr rhs)"
0 0 49 3 2 #")]"
0 0 49 29 1 #"\n"
0 0 49 3 6 #"    [("
0 0 49 3 4 #"list"
0 0 49 3 1 #" "
0 0 49 3 1 #"'"
0 0 49 3 4 #"call"
0 0 49 3 11 #" fun arg) ("
0 0 49 3 4 #"Call"
0 0 49 3 38 #" (parse-sexpr fun) (parse-sexpr arg))]"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ["
0 0 50 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 1 #"("
0 0 50 3 5 #"error"
0 0 50 3 2 #" '"
0 0 50 3 37 #"parse-sexpr \"bad syntax in ~s\" sexpr)"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"parse"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"String"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 63
#";; parses a string containing a FLANG expression to a FLANG AST"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 8 #" (parse "
0 0 49 3 3 #"str"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 36 #"  (parse-sexpr (string->sexpr str)))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 34 #";; a type for substitution caches:"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 11 #"define-type"
0 0 49 3 12 #" SubstCache "
0 0 49 3 1 #"="
0 0 49 3 2 #" ("
0 0 49 3 6 #"Listof"
0 0 49 3 2 #" ("
0 0 49 3 4 #"List"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 3 #")))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 11 #"empty-subst"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 10 #"SubstCache"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 18 #" empty-subst null)"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"extend"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 10 #"SubstCache"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 10 #"SubstCache"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 9 #" (extend "
0 0 49 3 4 #"name"
0 0 49 3 1 #" "
0 0 49 3 3 #"val"
0 0 49 3 1 #" "
0 0 49 3 2 #"sc"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 29 #"  (cons (list name val) sc)) "
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"lookup"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"Symbol"
0 0 49 3 1 #" "
0 0 49 3 10 #"SubstCache"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 9 #" (lookup "
0 0 49 3 4 #"name"
0 0 49 3 1 #" "
0 0 49 3 2 #"sc"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 3 #"let"
0 0 49 3 24 #" ([cell (assq name sc)])"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ("
0 0 49 3 2 #"if"
0 0 49 3 5 #" cell"
0 0 49 29 1 #"\n"
0 0 49 3 21 #"        (second cell)"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"        "
0 0 50 3 1 #"("
0 0 50 3 5 #"error"
0 0 50 3 2 #" '"
0 0 50 3 32 #"lookup \"no binding for ~s\" name)"
0 0 49 3 3 #")))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 8 #"arith-op"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 2 #" ("
0 0 49 3 6 #"Number"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 2 #") "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 68
#";; gets a Racket numeric binary operator, and uses it within a FLANG"
0 0 49 29 1 #"\n"
0 0 49 3 16 #";; `Num' wrapper"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 11 #" (arith-op "
0 0 49 3 2 #"op"
0 0 49 3 1 #" "
0 0 49 3 5 #"expr1"
0 0 49 3 1 #" "
0 0 49 3 5 #"expr2"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 11 #"Num->number"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 6 #"define"
0 0 49 3 14 #" (Num->number "
0 0 49 3 1 #"e"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ("
0 0 49 3 5 #"cases"
0 0 49 3 2 #" e"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"      [("
0 0 49 3 3 #"Num"
0 0 49 3 6 #" n) n]"
0 0 49 29 1 #"\n"
0 0 49 3 7 #"      ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 1 #"("
0 0 50 3 5 #"error"
0 0 50 3 2 #" '"
0 0 50 3 39 #"arith-op \"expects a number, got: ~s\" e)"
0 0 49 3 3 #"]))"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 3 #"Num"
0 0 49 3 47 #" (op (Num->number expr1) (Num->number expr2))))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 8 #"counterx"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 7 #"Natural"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 12 #" counterx 0)"
0 0 49 29 1 #"\n"
0 0 49 3 14 #";;;above eval "
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 4 #"eval"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #" "
0 0 49 3 10 #"SubstCache"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 5 #"FLANG"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 62
#";; evaluates FLANG expressions by reducing them to expressions"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 7 #" (eval "
0 0 49 3 4 #"expr"
0 0 49 3 1 #" "
0 0 49 3 2 #"sc"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 4 #"set!"
0 0 49 3 1 #" "
0 0 49 3 8 #"counterx"
0 0 49 3 17 #" (add1 counterx))"
0 0 49 29 1 #"\n"
0 0 49 3 83
(
 #"  (printf \"ActParmam(~a) = ~a~nSubstCache(~a) = ~a~n~n\"  counterx "
 #"expr counterx sc)"
) 0 0 49 29 1 #"\n"
0 0 49 3 2 #"  "
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 3 #"let"
0 0 49 3 16 #" ([cnt counterx]"
0 0 49 29 1 #"\n"
0 0 49 3 12 #"        [res"
0 0 49 29 1 #"\n"
0 0 49 3 10 #"         ("
0 0 49 3 5 #"cases"
0 0 49 3 5 #" expr"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 3 #"Num"
0 0 49 3 9 #" n) expr]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 3 #"Add"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 36 #"(arith-op + (eval l sc) (eval r sc))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 3 #"Sub"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 36 #"(arith-op - (eval l sc) (eval r sc))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 3 #"Mul"
0 0 49 3 43 #" l r) (arith-op * (eval l sc) (eval r sc))]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 3 #"Div"
0 0 49 3 1 #" "
0 0 50 3 1 #"l"
0 0 49 3 1 #" "
0 0 50 3 1 #"r"
0 0 49 3 2 #") "
0 0 50 3 36 #"(arith-op / (eval l sc) (eval r sc))"
0 0 49 3 1 #"]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 4 #"With"
0 0 49 3 32 #" bound-id named-expr bound-body)"
0 0 49 29 1 #"\n"
0 0 49 3 28 #"            (eval bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 61
#"                  (extend bound-id (eval named-expr sc) sc))]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 2 #"Id"
0 0 49 3 24 #" name) (lookup name sc)]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 3 #"Fun"
0 0 49 3 27 #" bound-id bound-body) expr]"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"           [("
0 0 49 3 4 #"Call"
0 0 49 3 19 #" fun-expr arg-expr)"
0 0 49 29 1 #"\n"
0 0 49 3 13 #"            ("
0 0 49 3 3 #"let"
0 0 49 3 28 #" ([fval (eval fun-expr sc)])"
0 0 49 29 1 #"\n"
0 0 49 3 15 #"              ("
0 0 49 3 5 #"cases"
0 0 49 3 5 #" fval"
0 0 49 29 1 #"\n"
0 0 49 3 18 #"                [("
0 0 49 3 3 #"Fun"
0 0 49 3 21 #" bound-id bound-body)"
0 0 49 29 1 #"\n"
0 0 49 3 33 #"                 (eval bound-body"
0 0 49 29 1 #"\n"
0 0 49 3 64
#"                       (extend bound-id (eval arg-expr sc) sc))]"
0 0 49 29 1 #"\n"
0 0 49 3 17 #"                ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 1 #"("
0 0 50 3 5 #"error"
0 0 50 3 2 #" '"
0 0 50 3 41 #"eval \"`call' expects a function, got: ~s\""
0 0 50 29 1 #"\n"
0 0 50 3 34 #"                             fval)"
0 0 49 3 7 #"]))])])"
0 0 49 29 1 #"\n"
0 0 49 3 39 #"    (printf \"Res(~a) = ~a~n~n\" cnt res)"
0 0 49 29 1 #"\n"
0 0 49 3 9 #"    res))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 3 #"run"
0 0 49 3 1 #" "
0 0 49 3 1 #":"
0 0 49 3 1 #" "
0 0 49 3 6 #"String"
0 0 49 3 1 #" "
0 0 49 3 2 #"->"
0 0 49 3 1 #" "
0 0 49 3 6 #"Number"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 49 #";; evaluate a FLANG program contained in a string"
0 0 49 29 1 #"\n"
0 0 49 3 1 #"("
0 0 49 3 6 #"define"
0 0 49 3 6 #" (run "
0 0 49 3 3 #"str"
0 0 49 3 1 #")"
0 0 49 29 1 #"\n"
0 0 49 3 3 #"  ("
0 0 49 3 3 #"let"
0 0 49 3 42 #" ([result (eval (parse str) empty-subst)])"
0 0 49 29 1 #"\n"
0 0 49 3 5 #"    ("
0 0 49 3 5 #"cases"
0 0 49 3 7 #" result"
0 0 49 29 1 #"\n"
0 0 49 3 8 #"      [("
0 0 49 3 3 #"Num"
0 0 49 3 6 #" n) n]"
0 0 49 29 1 #"\n"
0 0 49 3 7 #"      ["
0 0 49 3 4 #"else"
0 0 49 3 1 #" "
0 0 50 3 1 #"("
0 0 50 3 5 #"error"
0 0 50 3 2 #" '"
0 0 50 3 3 #"run"
0 0 50 29 1 #"\n"
0 0 50 3 65
#"                   \"evaluation returned a non-number: ~s\" result)"
0 0 49 3 4 #"])))"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 29 1 #"\n"
0 0 49 3 11 #"(run \"{with"
0 0 49 3 2 #" {"
0 0 49 3 1 #"u"
0 0 49 3 1 #" "
0 0 49 3 1 #"2"
0 0 49 3 15 #"} {call {with {"
0 0 49 3 27 #"u 3}{fun {x} {* x u}}}7}}\")"
0           0
